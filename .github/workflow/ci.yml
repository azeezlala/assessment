name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Go
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20' # Use your project's Go version

      # Step 3: Cache Dependencies
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Install Dependencies
      - name: Install Dependencies
        run: go mod tidy

      # Step 5: Run Linter
      - name: Run Go Linter
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...

      # Step 6: Run Tests
      - name: Run Unit Tests
        run: go test -v ./...

      # Step 7: Run Test Coverage
      - name: Test Coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
        continue-on-error: true # Allows the workflow to continue even if coverage fails

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Build Docker Image
      - name: Build and Tag Docker Image
        run: |
          docker build -t your-docker-image-name:latest .
